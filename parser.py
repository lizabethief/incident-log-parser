import csv
from datetime import datetime
import matplotlib.pyplot as plt
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time, os
from dotenv import load_dotenv
import requests

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
NIGHT_HOURS = range(0, 6)
LOG_FILE = "sample_logs.csv"
REPORT_FILE = "output_report.txt"
ALERT_FILE = "alerts.log"

# === Telegram ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

def send_telegram_alert(text):
    if TELEGRAM_TOKEN and CHAT_ID:
        requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            params={"chat_id": CHAT_ID, "text": text}
        )

# === –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –ª–æ–≥–∞—Ö ===
class LogWatcher(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path.endswith(".csv"):
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {event.src_path}")
            os.system("python parser.py")

observer = Observer()
observer.schedule(LogWatcher(), path=".", recursive=False)
observer.start()
print("–°–ª–µ–¥–∏–º –∑–∞ –ª–æ–≥–∞–º–∏...")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
night_logins = []
file_downloads = {}
night_downloads = {}
login_fails = {}
file_deletes = []
ip_activity = {}
alerts = []

# === –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ ===
with open(LOG_FILE, "r", encoding="utf-8") as file:
    reader = csv.DictReader(file)
    logs = list(reader)

for row in logs:
    ts = datetime.strptime(row["timestamp"], "%Y-%m-%d %H:%M:%S")
    hour = ts.hour
    user = row["username"]
    ip = row["src_ip"]
    event = row["event"]

    ip_activity[ip] = ip_activity.get(ip, 0) + 1

    if event == "login_success" and hour in NIGHT_HOURS:
        night_logins.append(row)

    if event == "file_download":
        file_downloads[user] = file_downloads.get(user, 0) + 1
        if hour in NIGHT_HOURS:
            night_downloads[user] = night_downloads.get(user, 0) + 1

    if event == "login_failed":
        login_fails[ip] = login_fails.get(ip, 0) + 1

    if event == "file_delete":
        file_deletes.append((row, hour))

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ ===
with open(REPORT_FILE, "w", encoding="utf-8") as out:
    out.write("üîí –ù–æ—á–Ω—ã–µ –≤—Ö–æ–¥—ã:\n")
    for e in night_logins:
        out.write(f"{e['timestamp']} ‚Äî {e['username']} ({e['src_ip']})\n")

    out.write("\nüì• –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (3+):\n")
    for user, count in file_downloads.items():
        if count >= 3:
            out.write(f"{user}: {count} –∑–∞–≥—Ä—É–∑–æ–∫\n")

    out.write("\nüåô –ù–æ—á–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n")
    for user, count in night_downloads.items():
        out.write(f"{user}: {count} –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–æ—á—å—é\n")

    out.write("\nüõë –ë—Ä—É—Ç—Ñ–æ—Ä—Å (3+ login_failed –æ—Ç –æ–¥–Ω–æ–≥–æ IP):\n")
    for ip, count in login_fails.items():
        if count >= 3:
            out.write(f"{ip}: {count} login_failed\n")

    out.write("\nüßπ –£–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –Ω–æ—á—å—é):\n")
    for (e, hour) in file_deletes:
        flag = "üïí –ù–û–ß–¨!" if hour in NIGHT_HOURS else ""
        out.write(f"{e['timestamp']} ‚Äî {e['username']} ({e['src_ip']}) {flag}\n")

    out.write("\nüìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ IP:\n")
    for ip, count in ip_activity.items():
        out.write(f"{ip}: {count} —Å–æ–±—ã—Ç–∏–π\n")

# === –ê–ª–µ—Ä—Ç—ã –≤ alert.log + Telegram ===
alerts = []
for user, count in file_downloads.items():
    if count >= 5:
        alerts.append(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {user} ‚Äî {count}")
for ip, count in login_fails.items():
    if count >= 3:
        msg = f"‚ùóÔ∏è–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å\nIP: {ip}\n–û—à–∏–±–æ–∫ –≤—Ö–æ–¥–∞: {count}"
        alerts.append(msg)

for row, hour in file_deletes:
    if hour in NIGHT_HOURS:
        msg = (
            f"‚ùóÔ∏è–ù–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞\n"
            f"–Æ–∑–µ—Ä: {row['username']}\n"
            f"IP: {row['src_ip']}\n"
            f"–í—Ä–µ–º—è: {row['timestamp']}"
        )
        alerts.append(msg)

# === –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
with open(ALERT_FILE, "w", encoding="utf-8") as alert_file:
    for alert in alerts:
        alert_file.write(alert + "\n\n")
        send_telegram_alert(alert)

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===

# üìä –ì—Ä–∞—Ñ–∏–∫ 1: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
hours = [datetime.strptime(e["timestamp"], "%Y-%m-%d %H:%M:%S").hour for e in logs]
hour_freq = {}
for h in hours:
    hour_freq[h] = hour_freq.get(h, 0) + 1

plt.bar(hour_freq.keys(), hour_freq.values(), color='skyblue')
plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
plt.xlabel("–ß–∞—Å")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π")
plt.grid(True)
plt.savefig("activity_by_hour.png")
plt.clf()

# üìä –ì—Ä–∞—Ñ–∏–∫ 2: –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
users = list(file_downloads.keys())
downloads = list(file_downloads.values())
plt.bar(users, downloads, color='orange')
plt.title("–°–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
plt.xlabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.savefig("downloads_by_user.png")
